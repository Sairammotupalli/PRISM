name: Generate PR Description

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  generate-pr-description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Detect Modified Folder
        id: detect-folder
        run: |
          echo "Detecting changes in the PR..."
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          
          MODEL=""
          SCRIPT_PATH=""

          if echo "$CHANGED_FILES" | grep -E '^deepseek-r1/'; then
            MODEL="deepseek-r1"
            SCRIPT_PATH="deepseek-r1/main.py"
          elif echo "$CHANGED_FILES" | grep -E '^llama3.2/'; then
            MODEL="llama3.2"
            SCRIPT_PATH="llama3.2/main.py"
          elif echo "$CHANGED_FILES" | grep -E '^mistral/'; then
            MODEL="mistral"
            SCRIPT_PATH="mistral/main.py"
          elif echo "$CHANGED_FILES" | grep -E '^chatgpt/'; then
            MODEL="chatgpt"
            SCRIPT_PATH="chatgpt/main.py"
          elif echo "$CHANGED_FILES" | grep -E '^claude/'; then
            MODEL="claude"
            SCRIPT_PATH="claude/main.py"
          fi

          if [[ -z "$MODEL" ]]; then
            echo "No relevant folder changes detected. Skipping PR description generation."
            exit 0
          fi

          echo "Selected Model: $MODEL"
          echo "MODEL=$MODEL" >> $GITHUB_ENV
          echo "SCRIPT_PATH=$SCRIPT_PATH" >> $GITHUB_ENV

      - name: Generate PR Diff Content
        run: |
          echo "Running git diff between the PR branch and main..."
          git diff origin/main...HEAD > diff_content.txt
          echo "Diff content saved to diff_content.txt"

      - name: Set up Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openai anthropic
          

      - name: Generate PR Description
        env:
          FAST_API_URL: https://af99-2601-647-4601-2b0-ac9c-48d4-7757-391.ngrok-free.app/generate # your ngrok URL
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          
        run: |
          echo "Running ${SCRIPT_PATH} with diff_content.txt"
          python ${SCRIPT_PATH} "diff_content.txt" "${{ github.event.pull_request.number }}"

      - name: Capture PR Description Output
        id: read_pr_description
        run: |
          echo "Checking contents of pr_description.txt"
          if [ ! -s pr_description.txt ]; then
            echo "pr_description.txt is empty! Setting default message."
            echo "No content from the model." > pr_description.txt
          fi
          pr_body=$(cat pr_description.txt)
          echo "PR_BODY<<EOF" >> $GITHUB_ENV
          echo "$pr_body" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Debug PR Description Content
        run: |
          echo "Debug: Checking pr_description.txt contents..."
          cat pr_description.txt || echo "pr_description.txt is empty!"

      - name: Update Pull Request Body
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prBody = process.env.PR_BODY;
            if (prBody.trim() === "No content from the model.") {
              console.log("Skipping PR update because the model response is empty.");
            } else {
              console.log("Updating PR with generated description.");
              github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: prBody
              });
            }
            
      - name: Upload Scores to Firebase
        env:
          FIREBASE_URL: ${{ secrets.FIREBASE_URL }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}
        run: |
          echo "Uploading scores to Firebase..."
          python3 firebase/upload_scores.py pr_description.txt "$GITHUB_USER" "${{ github.event.pull_request.number }}" "$MODEL"
